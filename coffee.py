import pandas as pd
from dateutil.parser import parse
from collections import defaultdict
from train import TrainModel, PredictModel
from preprocess import get_predict_date, granularity_resample 
import logging

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - Coffee - %(message)s')


class Coffee(object):

    def __init__(self, user_params):
        """
        Initialize the Coffee instance

        Parameters
        ----------
        user_params : dict
            A dict contains predict configs. 
            User is able to define different parameters here and pass in external features and similarity features.
            Available Parameters: 
                - granularity: '1/24' for daily updates, '1/168' for weekly updates and so on
                - window_size: length of lagged value vector: [vt-1, vt-2, vt-3, vt-4]
                - target_preprocessing: preprocessing method of target values
                    !!! PROBLEM: Has to be log1p so far as predict method use expm1 by default
                - model: available models, so far dual_stage_pairwise only
                - backtrace_days: numbers of pairs that will be generated
                - backtrace_type: 'previous' or 'similarity'
                - backtrace_step: 1 by default
                    Used when you do not what to use [vt-1, vt-2, vt-3, ... ] as lagged value vector
                    For example, you want to do hourly prediction, then you may want to set it to be 24 so as to use the same time's data from last day
                - model_type: 'predict' or 'evaluate'
                - predict_len: skip days when generating feature vectors and predict date
                - evaluate_type: 'batch_test', 'rolling_test'
                    !!! PROBLEM: There are still some problems with 'rolling_test' 
                - evaluate_ratio/evaluate_size: if you specify evaluate_size, evaluate_ratio won't be used
                - ratio: percentage of the prediction results generated by date pairs that will be used to produce final forecasting result
                - model_params: pre-trained model_params
                - external_feature: external feature, format as [datetime: [v1, v2, v3]], datetime used as key to match corresponding lagged value vectors
                - similarity_feature: same as external feature, used to find similar dates
                - similarity_type: 'euclidean', 'cosine', 'dtw'

        """
        self.default_params = defaultdict()
        self.predict_date = None
        self.default_params['granularity'] = '1/24'
        self.default_params['window_size'] = 4
        self.default_params['target_preprocessing'] = "log1p"
        self.default_params['model'] = 'dual_stage_pairwise'
        self.default_params['backtrace_days'] = 30
        self.default_params['backtrace_type'] = "previous"
        self.default_params['backtrace_step'] = 1
        self.default_params['model_type'] = 'predict'
        self.default_params['predict_len'] = 1
        self.default_params['evaluate_type'] = 'batch_test'
        self.default_params['evaluate_ratio'] = 0.1
        self.default_params['evaluate_size'] = None
        self.default_params['ratio'] = 0.3
        self.default_params['model_params'] = None
        self.default_params['external_feature'] = None
        self.default_params['similarity_feature'] = None
        self.default_params['similarity_type'] = "euclidean"

        # reload user defined params
        for key in user_params.keys():
            self.default_params[key] = user_params[key]
    
    def make_dataframe(self, df):
        """
        Preprocess the DataFrame

        Parameters
        ----------
        df: pandas DataFrame
            Original Dataframe 
            Need to set 'date' column

        Returns
        -------
        df: pandas DataFrame
            Preprocessed Dataframe
            Set datetime column, resample based on granularity, generate predict_date

        """

        granularity = self.default_params['granularity']
        df = granularity_resample(df, granularity)

        if self.default_params['model_type'] == 'predict':
            predict_len = self.default_params['predict_len']
            predict_date = get_predict_date(df, predict_len, granularity)
            self.predict_date = [parse(x).strftime('%Y-%m-%d %H:%M:%S') for x in predict_date]

            predict_df = pd.DataFrame({"date": [x for x in self.predict_date], "value": 0})
            df = pd.concat([df[['date', 'value']], predict_df])
            df['date'] = pd.to_datetime(df['date'])

        elif self.default_params['model_type'] == 'evaluate':
            df = df[['date', 'value']]
        
        return df
    
    def preprocess(self, df):
        """
        Preprocessing method in Coffee

        Parameters
        ----------
        df : pandas DataFrame
            Preprocessed dataframe
        
        Returns
        -------
        trained_features : dict
            A dict like {'features': pairwise_feature,
                         'labels': pairwise_label,
                         'dates': pairwise_dates,
                         'original_value': pairwise_value,
                         'backtrace_days': backtrace_days,
                         'ratio': ratio}
        """
        
        preprocess_name = "preprocess_" + self.default_params['model']
        preprocess_model = getattr(TrainModel, preprocess_name)
        trained_features = preprocess_model(df, self.default_params)
        return trained_features

    def train(self, trained_features):
        """
        Train method in Coffee

        Parameters
        ----------
        trained_features : dict
            Trained features generated by preprocess method

        Returns
        -------
        model : obj
            Trained model
        """

        model_name = 'train_model_' + self.default_params['model']
        train_model = getattr(TrainModel, model_name)
        model = train_model(trained_features, model_params=self.default_params['model_params'])
        return model

    def fit(self, df):
        """
        General fit method in Coffee
        A wrapper function of preprocess and train method

        Parameters
        ----------
        df : pandas DataFrame
            Preprocessed dataframe
        
        Returns
        -------
        trained_features : dict
            A dict like {'features': pairwise_feature,
                         'labels': pairwise_label,
                         'dates': pairwise_dates,
                         'original_value': pairwise_value,
                         'backtrace_days': backtrace_days,
                         'ratio': ratio}
        model : obj
            Trained model
        """
        
        preprocess_name = "preprocess_" + self.default_params['model']
        preprocess_model = getattr(TrainModel, preprocess_name)
        trained_features = preprocess_model(df, self.default_params)

        model_name = 'train_model_' + self.default_params['model']
        train_model = getattr(TrainModel, model_name)
        model = train_model(trained_features, model_params=self.default_params['model_params'])
        
        return trained_features, model

    def predict(self, trained_model, predict_feature):
        """
        Predict method in Coffee

        Parameters
        ----------
        trained_model : obj
            Trained model
        predict_feature : dict
            A dict contains predict features and configs
        
        Returns
        -------
        forecast : pandas DataFrame
            Forecast result

        """

        model_name = 'predict_model_' + self.default_params['model']

        if self.default_params['model_type'] == "predict":
            predict_feature['predict_date'] = self.predict_date

        predict_model = PredictModel(trained_model, predict_feature)
        predict_model = getattr(predict_model, model_name)

        forecast = predict_model()

        return forecast

    def run_model(self, df):
        """
        One-stop function for generating forecasts

        Parameters
        ----------
        df : pandas DataFrame
           Raw data

        Returns
        -------
        forecast : pandas DataFrame
            Forecast result

        """

        self.default_params['model_type'] = 'predict'

        df = self.make_dataframe(df)

        processed_feature, model = self.fit(df)

        processed_feature['predict_date'] = self.predict_date

        forecast = self.predict(model, processed_feature)

        return forecast
